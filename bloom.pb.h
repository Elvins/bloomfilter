// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bloom.proto

#ifndef PROTOBUF_bloom_2eproto__INCLUDED
#define PROTOBUF_bloom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb_bloom {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bloom_2eproto();
void protobuf_AssignDesc_bloom_2eproto();
void protobuf_ShutdownFile_bloom_2eproto();

class Bloom;
class BloomInstance;
class BloomSlice;

// ===================================================================

class Bloom : public ::google::protobuf::Message {
 public:
  Bloom();
  virtual ~Bloom();

  Bloom(const Bloom& from);

  inline Bloom& operator=(const Bloom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bloom& default_instance();

  void Swap(Bloom* other);

  // implements Message ----------------------------------------------

  Bloom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bloom& from);
  void MergeFrom(const Bloom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb_bloom.BloomInstance instances = 1;
  inline int instances_size() const;
  inline void clear_instances();
  static const int kInstancesFieldNumber = 1;
  inline const ::pb_bloom::BloomInstance& instances(int index) const;
  inline ::pb_bloom::BloomInstance* mutable_instances(int index);
  inline ::pb_bloom::BloomInstance* add_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomInstance >&
      instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomInstance >*
      mutable_instances();

  // optional uint32 trans_period = 2;
  inline bool has_trans_period() const;
  inline void clear_trans_period();
  static const int kTransPeriodFieldNumber = 2;
  inline ::google::protobuf::uint32 trans_period() const;
  inline void set_trans_period(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb_bloom.Bloom)
 private:
  inline void set_has_trans_period();
  inline void clear_has_trans_period();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomInstance > instances_;
  ::google::protobuf::uint32 trans_period_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bloom_2eproto();
  friend void protobuf_AssignDesc_bloom_2eproto();
  friend void protobuf_ShutdownFile_bloom_2eproto();

  void InitAsDefaultInstance();
  static Bloom* default_instance_;
};
// -------------------------------------------------------------------

class BloomInstance : public ::google::protobuf::Message {
 public:
  BloomInstance();
  virtual ~BloomInstance();

  BloomInstance(const BloomInstance& from);

  inline BloomInstance& operator=(const BloomInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomInstance& default_instance();

  void Swap(BloomInstance* other);

  // implements Message ----------------------------------------------

  BloomInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BloomInstance& from);
  void MergeFrom(const BloomInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 entries = 1;
  inline bool has_entries() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline ::google::protobuf::uint32 entries() const;
  inline void set_entries(::google::protobuf::uint32 value);

  // optional uint32 err_mode = 2;
  inline bool has_err_mode() const;
  inline void clear_err_mode();
  static const int kErrModeFieldNumber = 2;
  inline ::google::protobuf::uint32 err_mode() const;
  inline void set_err_mode(::google::protobuf::uint32 value);

  // optional uint32 err_deno = 3;
  inline bool has_err_deno() const;
  inline void clear_err_deno();
  static const int kErrDenoFieldNumber = 3;
  inline ::google::protobuf::uint32 err_deno() const;
  inline void set_err_deno(::google::protobuf::uint32 value);

  // optional uint32 slice_num = 4;
  inline bool has_slice_num() const;
  inline void clear_slice_num();
  static const int kSliceNumFieldNumber = 4;
  inline ::google::protobuf::uint32 slice_num() const;
  inline void set_slice_num(::google::protobuf::uint32 value);

  // repeated .pb_bloom.BloomSlice slices = 5;
  inline int slices_size() const;
  inline void clear_slices();
  static const int kSlicesFieldNumber = 5;
  inline const ::pb_bloom::BloomSlice& slices(int index) const;
  inline ::pb_bloom::BloomSlice* mutable_slices(int index);
  inline ::pb_bloom::BloomSlice* add_slices();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomSlice >&
      slices() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomSlice >*
      mutable_slices();

  // optional uint32 create_time = 6;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional bool reset = 7;
  inline bool has_reset() const;
  inline void clear_reset();
  static const int kResetFieldNumber = 7;
  inline bool reset() const;
  inline void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:pb_bloom.BloomInstance)
 private:
  inline void set_has_entries();
  inline void clear_has_entries();
  inline void set_has_err_mode();
  inline void clear_has_err_mode();
  inline void set_has_err_deno();
  inline void clear_has_err_deno();
  inline void set_has_slice_num();
  inline void clear_has_slice_num();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_reset();
  inline void clear_has_reset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 entries_;
  ::google::protobuf::uint32 err_mode_;
  ::google::protobuf::uint32 err_deno_;
  ::google::protobuf::uint32 slice_num_;
  ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomSlice > slices_;
  ::google::protobuf::uint32 create_time_;
  bool reset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_bloom_2eproto();
  friend void protobuf_AssignDesc_bloom_2eproto();
  friend void protobuf_ShutdownFile_bloom_2eproto();

  void InitAsDefaultInstance();
  static BloomInstance* default_instance_;
};
// -------------------------------------------------------------------

class BloomSlice : public ::google::protobuf::Message {
 public:
  BloomSlice();
  virtual ~BloomSlice();

  BloomSlice(const BloomSlice& from);

  inline BloomSlice& operator=(const BloomSlice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomSlice& default_instance();

  void Swap(BloomSlice* other);

  // implements Message ----------------------------------------------

  BloomSlice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BloomSlice& from);
  void MergeFrom(const BloomSlice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 create_time = 1;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 access_time = 2;
  inline bool has_access_time() const;
  inline void clear_access_time();
  static const int kAccessTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 access_time() const;
  inline void set_access_time(::google::protobuf::uint32 value);

  // repeated uint64 data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::uint64 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint64 value);
  inline void add_data(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_data();

  // optional uint32 bits = 4;
  inline bool has_bits() const;
  inline void clear_bits();
  static const int kBitsFieldNumber = 4;
  inline ::google::protobuf::uint32 bits() const;
  inline void set_bits(::google::protobuf::uint32 value);

  // optional uint32 hashes = 5;
  inline bool has_hashes() const;
  inline void clear_hashes();
  static const int kHashesFieldNumber = 5;
  inline ::google::protobuf::uint32 hashes() const;
  inline void set_hashes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb_bloom.BloomSlice)
 private:
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_access_time();
  inline void clear_has_access_time();
  inline void set_has_bits();
  inline void clear_has_bits();
  inline void set_has_hashes();
  inline void clear_has_hashes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 access_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > data_;
  ::google::protobuf::uint32 bits_;
  ::google::protobuf::uint32 hashes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bloom_2eproto();
  friend void protobuf_AssignDesc_bloom_2eproto();
  friend void protobuf_ShutdownFile_bloom_2eproto();

  void InitAsDefaultInstance();
  static BloomSlice* default_instance_;
};
// ===================================================================


// ===================================================================

// Bloom

// repeated .pb_bloom.BloomInstance instances = 1;
inline int Bloom::instances_size() const {
  return instances_.size();
}
inline void Bloom::clear_instances() {
  instances_.Clear();
}
inline const ::pb_bloom::BloomInstance& Bloom::instances(int index) const {
  return instances_.Get(index);
}
inline ::pb_bloom::BloomInstance* Bloom::mutable_instances(int index) {
  return instances_.Mutable(index);
}
inline ::pb_bloom::BloomInstance* Bloom::add_instances() {
  return instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomInstance >&
Bloom::instances() const {
  return instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomInstance >*
Bloom::mutable_instances() {
  return &instances_;
}

// optional uint32 trans_period = 2;
inline bool Bloom::has_trans_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bloom::set_has_trans_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bloom::clear_has_trans_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bloom::clear_trans_period() {
  trans_period_ = 0u;
  clear_has_trans_period();
}
inline ::google::protobuf::uint32 Bloom::trans_period() const {
  return trans_period_;
}
inline void Bloom::set_trans_period(::google::protobuf::uint32 value) {
  set_has_trans_period();
  trans_period_ = value;
}

// -------------------------------------------------------------------

// BloomInstance

// optional uint32 entries = 1;
inline bool BloomInstance::has_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomInstance::set_has_entries() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomInstance::clear_has_entries() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomInstance::clear_entries() {
  entries_ = 0u;
  clear_has_entries();
}
inline ::google::protobuf::uint32 BloomInstance::entries() const {
  return entries_;
}
inline void BloomInstance::set_entries(::google::protobuf::uint32 value) {
  set_has_entries();
  entries_ = value;
}

// optional uint32 err_mode = 2;
inline bool BloomInstance::has_err_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomInstance::set_has_err_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomInstance::clear_has_err_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomInstance::clear_err_mode() {
  err_mode_ = 0u;
  clear_has_err_mode();
}
inline ::google::protobuf::uint32 BloomInstance::err_mode() const {
  return err_mode_;
}
inline void BloomInstance::set_err_mode(::google::protobuf::uint32 value) {
  set_has_err_mode();
  err_mode_ = value;
}

// optional uint32 err_deno = 3;
inline bool BloomInstance::has_err_deno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomInstance::set_has_err_deno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomInstance::clear_has_err_deno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomInstance::clear_err_deno() {
  err_deno_ = 0u;
  clear_has_err_deno();
}
inline ::google::protobuf::uint32 BloomInstance::err_deno() const {
  return err_deno_;
}
inline void BloomInstance::set_err_deno(::google::protobuf::uint32 value) {
  set_has_err_deno();
  err_deno_ = value;
}

// optional uint32 slice_num = 4;
inline bool BloomInstance::has_slice_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomInstance::set_has_slice_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomInstance::clear_has_slice_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomInstance::clear_slice_num() {
  slice_num_ = 0u;
  clear_has_slice_num();
}
inline ::google::protobuf::uint32 BloomInstance::slice_num() const {
  return slice_num_;
}
inline void BloomInstance::set_slice_num(::google::protobuf::uint32 value) {
  set_has_slice_num();
  slice_num_ = value;
}

// repeated .pb_bloom.BloomSlice slices = 5;
inline int BloomInstance::slices_size() const {
  return slices_.size();
}
inline void BloomInstance::clear_slices() {
  slices_.Clear();
}
inline const ::pb_bloom::BloomSlice& BloomInstance::slices(int index) const {
  return slices_.Get(index);
}
inline ::pb_bloom::BloomSlice* BloomInstance::mutable_slices(int index) {
  return slices_.Mutable(index);
}
inline ::pb_bloom::BloomSlice* BloomInstance::add_slices() {
  return slices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomSlice >&
BloomInstance::slices() const {
  return slices_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_bloom::BloomSlice >*
BloomInstance::mutable_slices() {
  return &slices_;
}

// optional uint32 create_time = 6;
inline bool BloomInstance::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BloomInstance::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BloomInstance::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BloomInstance::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 BloomInstance::create_time() const {
  return create_time_;
}
inline void BloomInstance::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional bool reset = 7;
inline bool BloomInstance::has_reset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BloomInstance::set_has_reset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BloomInstance::clear_has_reset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BloomInstance::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
inline bool BloomInstance::reset() const {
  return reset_;
}
inline void BloomInstance::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
}

// -------------------------------------------------------------------

// BloomSlice

// optional uint32 create_time = 1;
inline bool BloomSlice::has_create_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomSlice::set_has_create_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomSlice::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomSlice::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 BloomSlice::create_time() const {
  return create_time_;
}
inline void BloomSlice::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 access_time = 2;
inline bool BloomSlice::has_access_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomSlice::set_has_access_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomSlice::clear_has_access_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomSlice::clear_access_time() {
  access_time_ = 0u;
  clear_has_access_time();
}
inline ::google::protobuf::uint32 BloomSlice::access_time() const {
  return access_time_;
}
inline void BloomSlice::set_access_time(::google::protobuf::uint32 value) {
  set_has_access_time();
  access_time_ = value;
}

// repeated uint64 data = 3;
inline int BloomSlice::data_size() const {
  return data_.size();
}
inline void BloomSlice::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint64 BloomSlice::data(int index) const {
  return data_.Get(index);
}
inline void BloomSlice::set_data(int index, ::google::protobuf::uint64 value) {
  data_.Set(index, value);
}
inline void BloomSlice::add_data(::google::protobuf::uint64 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BloomSlice::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BloomSlice::mutable_data() {
  return &data_;
}

// optional uint32 bits = 4;
inline bool BloomSlice::has_bits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomSlice::set_has_bits() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomSlice::clear_has_bits() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomSlice::clear_bits() {
  bits_ = 0u;
  clear_has_bits();
}
inline ::google::protobuf::uint32 BloomSlice::bits() const {
  return bits_;
}
inline void BloomSlice::set_bits(::google::protobuf::uint32 value) {
  set_has_bits();
  bits_ = value;
}

// optional uint32 hashes = 5;
inline bool BloomSlice::has_hashes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BloomSlice::set_has_hashes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BloomSlice::clear_has_hashes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BloomSlice::clear_hashes() {
  hashes_ = 0u;
  clear_has_hashes();
}
inline ::google::protobuf::uint32 BloomSlice::hashes() const {
  return hashes_;
}
inline void BloomSlice::set_hashes(::google::protobuf::uint32 value) {
  set_has_hashes();
  hashes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_bloom

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bloom_2eproto__INCLUDED
