// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bloom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bloom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb_bloom {

namespace {

const ::google::protobuf::Descriptor* Bloom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bloom_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomSlice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomSlice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bloom_2eproto() {
  protobuf_AddDesc_bloom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bloom.proto");
  GOOGLE_CHECK(file != NULL);
  Bloom_descriptor_ = file->message_type(0);
  static const int Bloom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bloom, instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bloom, trans_period_),
  };
  Bloom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bloom_descriptor_,
      Bloom::default_instance_,
      Bloom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bloom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bloom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bloom));
  BloomInstance_descriptor_ = file->message_type(1);
  static const int BloomInstance_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, err_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, err_deno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, slice_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, reset_),
  };
  BloomInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomInstance_descriptor_,
      BloomInstance::default_instance_,
      BloomInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomInstance));
  BloomSlice_descriptor_ = file->message_type(2);
  static const int BloomSlice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, access_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, hashes_),
  };
  BloomSlice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomSlice_descriptor_,
      BloomSlice::default_instance_,
      BloomSlice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomSlice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomSlice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bloom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bloom_descriptor_, &Bloom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomInstance_descriptor_, &BloomInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomSlice_descriptor_, &BloomSlice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bloom_2eproto() {
  delete Bloom::default_instance_;
  delete Bloom_reflection_;
  delete BloomInstance::default_instance_;
  delete BloomInstance_reflection_;
  delete BloomSlice::default_instance_;
  delete BloomSlice_reflection_;
}

void protobuf_AddDesc_bloom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013bloom.proto\022\010pb_bloom\"I\n\005Bloom\022*\n\tinst"
    "ances\030\001 \003(\0132\027.pb_bloom.BloomInstance\022\024\n\014"
    "trans_period\030\002 \001(\r\"\241\001\n\rBloomInstance\022\017\n\007"
    "entries\030\001 \001(\r\022\020\n\010err_mode\030\002 \001(\r\022\020\n\010err_d"
    "eno\030\003 \001(\r\022\021\n\tslice_num\030\004 \001(\r\022$\n\006slices\030\005"
    " \003(\0132\024.pb_bloom.BloomSlice\022\023\n\013create_tim"
    "e\030\006 \001(\r\022\r\n\005reset\030\007 \001(\010\"b\n\nBloomSlice\022\023\n\013"
    "create_time\030\001 \001(\r\022\023\n\013access_time\030\002 \001(\r\022\014"
    "\n\004data\030\003 \003(\004\022\014\n\004bits\030\004 \001(\r\022\016\n\006hashes\030\005 \001"
    "(\r", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bloom.proto", &protobuf_RegisterTypes);
  Bloom::default_instance_ = new Bloom();
  BloomInstance::default_instance_ = new BloomInstance();
  BloomSlice::default_instance_ = new BloomSlice();
  Bloom::default_instance_->InitAsDefaultInstance();
  BloomInstance::default_instance_->InitAsDefaultInstance();
  BloomSlice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bloom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bloom_2eproto {
  StaticDescriptorInitializer_bloom_2eproto() {
    protobuf_AddDesc_bloom_2eproto();
  }
} static_descriptor_initializer_bloom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Bloom::kInstancesFieldNumber;
const int Bloom::kTransPeriodFieldNumber;
#endif  // !_MSC_VER

Bloom::Bloom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bloom::InitAsDefaultInstance() {
}

Bloom::Bloom(const Bloom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bloom::SharedCtor() {
  _cached_size_ = 0;
  trans_period_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bloom::~Bloom() {
  SharedDtor();
}

void Bloom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bloom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bloom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bloom_descriptor_;
}

const Bloom& Bloom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bloom_2eproto();
  return *default_instance_;
}

Bloom* Bloom::default_instance_ = NULL;

Bloom* Bloom::New() const {
  return new Bloom;
}

void Bloom::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    trans_period_ = 0u;
  }
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bloom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_bloom.BloomInstance instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instances;
        if (input->ExpectTag(16)) goto parse_trans_period;
        break;
      }

      // optional uint32 trans_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_period_)));
          set_has_trans_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bloom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb_bloom.BloomInstance instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instances(i), output);
  }

  // optional uint32 trans_period = 2;
  if (has_trans_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trans_period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bloom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb_bloom.BloomInstance instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instances(i), target);
  }

  // optional uint32 trans_period = 2;
  if (has_trans_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trans_period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bloom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 trans_period = 2;
    if (has_trans_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_period());
    }

  }
  // repeated .pb_bloom.BloomInstance instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bloom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bloom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bloom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bloom::MergeFrom(const Bloom& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_trans_period()) {
      set_trans_period(from.trans_period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bloom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bloom::CopyFrom(const Bloom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bloom::IsInitialized() const {

  return true;
}

void Bloom::Swap(Bloom* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    std::swap(trans_period_, other->trans_period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bloom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bloom_descriptor_;
  metadata.reflection = Bloom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomInstance::kEntriesFieldNumber;
const int BloomInstance::kErrModeFieldNumber;
const int BloomInstance::kErrDenoFieldNumber;
const int BloomInstance::kSliceNumFieldNumber;
const int BloomInstance::kSlicesFieldNumber;
const int BloomInstance::kCreateTimeFieldNumber;
const int BloomInstance::kResetFieldNumber;
#endif  // !_MSC_VER

BloomInstance::BloomInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloomInstance::InitAsDefaultInstance() {
}

BloomInstance::BloomInstance(const BloomInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloomInstance::SharedCtor() {
  _cached_size_ = 0;
  entries_ = 0u;
  err_mode_ = 0u;
  err_deno_ = 0u;
  slice_num_ = 0u;
  create_time_ = 0u;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomInstance::~BloomInstance() {
  SharedDtor();
}

void BloomInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BloomInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomInstance_descriptor_;
}

const BloomInstance& BloomInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bloom_2eproto();
  return *default_instance_;
}

BloomInstance* BloomInstance::default_instance_ = NULL;

BloomInstance* BloomInstance::New() const {
  return new BloomInstance;
}

void BloomInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entries_ = 0u;
    err_mode_ = 0u;
    err_deno_ = 0u;
    slice_num_ = 0u;
    create_time_ = 0u;
    reset_ = false;
  }
  slices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entries_)));
          set_has_entries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_mode;
        break;
      }

      // optional uint32 err_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_mode_)));
          set_has_err_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_deno;
        break;
      }

      // optional uint32 err_deno = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_deno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_deno_)));
          set_has_err_deno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slice_num;
        break;
      }

      // optional uint32 slice_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slice_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_num_)));
          set_has_slice_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_slices;
        break;
      }

      // repeated .pb_bloom.BloomSlice slices = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_slices;
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reset;
        break;
      }

      // optional bool reset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloomInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 entries = 1;
  if (has_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entries(), output);
  }

  // optional uint32 err_mode = 2;
  if (has_err_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->err_mode(), output);
  }

  // optional uint32 err_deno = 3;
  if (has_err_deno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->err_deno(), output);
  }

  // optional uint32 slice_num = 4;
  if (has_slice_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slice_num(), output);
  }

  // repeated .pb_bloom.BloomSlice slices = 5;
  for (int i = 0; i < this->slices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->slices(i), output);
  }

  // optional uint32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_time(), output);
  }

  // optional bool reset = 7;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloomInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 entries = 1;
  if (has_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entries(), target);
  }

  // optional uint32 err_mode = 2;
  if (has_err_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->err_mode(), target);
  }

  // optional uint32 err_deno = 3;
  if (has_err_deno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->err_deno(), target);
  }

  // optional uint32 slice_num = 4;
  if (has_slice_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slice_num(), target);
  }

  // repeated .pb_bloom.BloomSlice slices = 5;
  for (int i = 0; i < this->slices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->slices(i), target);
  }

  // optional uint32 create_time = 6;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->create_time(), target);
  }

  // optional bool reset = 7;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloomInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 entries = 1;
    if (has_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entries());
    }

    // optional uint32 err_mode = 2;
    if (has_err_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_mode());
    }

    // optional uint32 err_deno = 3;
    if (has_err_deno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err_deno());
    }

    // optional uint32 slice_num = 4;
    if (has_slice_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_num());
    }

    // optional uint32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional bool reset = 7;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb_bloom.BloomSlice slices = 5;
  total_size += 1 * this->slices_size();
  for (int i = 0; i < this->slices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomInstance::MergeFrom(const BloomInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  slices_.MergeFrom(from.slices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entries()) {
      set_entries(from.entries());
    }
    if (from.has_err_mode()) {
      set_err_mode(from.err_mode());
    }
    if (from.has_err_deno()) {
      set_err_deno(from.err_deno());
    }
    if (from.has_slice_num()) {
      set_slice_num(from.slice_num());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomInstance::CopyFrom(const BloomInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomInstance::IsInitialized() const {

  return true;
}

void BloomInstance::Swap(BloomInstance* other) {
  if (other != this) {
    std::swap(entries_, other->entries_);
    std::swap(err_mode_, other->err_mode_);
    std::swap(err_deno_, other->err_deno_);
    std::swap(slice_num_, other->slice_num_);
    slices_.Swap(&other->slices_);
    std::swap(create_time_, other->create_time_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomInstance_descriptor_;
  metadata.reflection = BloomInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomSlice::kCreateTimeFieldNumber;
const int BloomSlice::kAccessTimeFieldNumber;
const int BloomSlice::kDataFieldNumber;
const int BloomSlice::kBitsFieldNumber;
const int BloomSlice::kHashesFieldNumber;
#endif  // !_MSC_VER

BloomSlice::BloomSlice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloomSlice::InitAsDefaultInstance() {
}

BloomSlice::BloomSlice(const BloomSlice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloomSlice::SharedCtor() {
  _cached_size_ = 0;
  create_time_ = 0u;
  access_time_ = 0u;
  bits_ = 0u;
  hashes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomSlice::~BloomSlice() {
  SharedDtor();
}

void BloomSlice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BloomSlice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomSlice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomSlice_descriptor_;
}

const BloomSlice& BloomSlice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bloom_2eproto();
  return *default_instance_;
}

BloomSlice* BloomSlice::default_instance_ = NULL;

BloomSlice* BloomSlice::New() const {
  return new BloomSlice;
}

void BloomSlice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    create_time_ = 0u;
    access_time_ = 0u;
    bits_ = 0u;
    hashes_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomSlice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 create_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_access_time;
        break;
      }

      // optional uint32 access_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_time_)));
          set_has_access_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // repeated uint64 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_bits;
        break;
      }

      // optional uint32 bits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hashes;
        break;
      }

      // optional uint32 hashes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hashes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hashes_)));
          set_has_hashes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloomSlice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 create_time = 1;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->create_time(), output);
  }

  // optional uint32 access_time = 2;
  if (has_access_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->access_time(), output);
  }

  // repeated uint64 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->data(i), output);
  }

  // optional uint32 bits = 4;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bits(), output);
  }

  // optional uint32 hashes = 5;
  if (has_hashes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hashes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloomSlice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 create_time = 1;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->create_time(), target);
  }

  // optional uint32 access_time = 2;
  if (has_access_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->access_time(), target);
  }

  // repeated uint64 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->data(i), target);
  }

  // optional uint32 bits = 4;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bits(), target);
  }

  // optional uint32 hashes = 5;
  if (has_hashes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hashes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloomSlice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 create_time = 1;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 access_time = 2;
    if (has_access_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->access_time());
    }

    // optional uint32 bits = 4;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

    // optional uint32 hashes = 5;
    if (has_hashes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hashes());
    }

  }
  // repeated uint64 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomSlice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomSlice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomSlice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomSlice::MergeFrom(const BloomSlice& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_access_time()) {
      set_access_time(from.access_time());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_hashes()) {
      set_hashes(from.hashes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomSlice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomSlice::CopyFrom(const BloomSlice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomSlice::IsInitialized() const {

  return true;
}

void BloomSlice::Swap(BloomSlice* other) {
  if (other != this) {
    std::swap(create_time_, other->create_time_);
    std::swap(access_time_, other->access_time_);
    data_.Swap(&other->data_);
    std::swap(bits_, other->bits_);
    std::swap(hashes_, other->hashes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomSlice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomSlice_descriptor_;
  metadata.reflection = BloomSlice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_bloom

// @@protoc_insertion_point(global_scope)
